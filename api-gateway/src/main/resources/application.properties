# set 0 to automate looking for a port.
# when add like and example 8081- it is hardcoding style
server.port=8765

#id of microservice to search it in the system
spring.application.name=api-gateway

# url to go eureka
eureka.client.service-url.defaultZone=http://localhost:8761/eureka

# logging messages format
logging.pattern.console=%C{1.} [%-5level] %d{HH:mm:ss} - %msg%n

# settings for gateway microservice
# this parameter need to enable locator to correct work of api gateway
spring.cloud.gateway.discovery.locator.enabled=true

# independent for lower and upper case in names of the services, and it will work correct
spring.cloud.gateway.discovery.locator.lower-case-service-id=true

# routing link on api gateway- like an aliases
spring.cloud.gateway.routes[0].id=test
# link to load balancer lb service with id of microservice to routing
spring.cloud.gateway.routes[0].uri=lb://eclient
# new path for mapping without eclient
spring.cloud.gateway.routes[0].predicates[0]=Path=/main/test
# mapping method in rest client
spring.cloud.gateway.routes[0].predicates[1]=Method=GET



# routing link on api gateway- like an aliases link
spring.cloud.gateway.routes[1].id=name
# link to load balancer lb service with id of microservice to routing
spring.cloud.gateway.routes[1].uri=lb://eclient2
# new path for mapping without eclient
spring.cloud.gateway.routes[1].predicates[0]=Path=/new/name
# mapping method in rest client
spring.cloud.gateway.routes[1].predicates[1]=Method=GET